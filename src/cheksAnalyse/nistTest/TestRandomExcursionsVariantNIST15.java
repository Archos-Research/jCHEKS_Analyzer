package cheksAnalyse.nistTest;

import com.archosResearch.jCHEKS.concept.chaoticSystem.AbstractChaoticSystem;
import static org.apache.commons.math3.special.Erf.erfc;

/**
 *
 * @author Michael Roussel rousselm4@gmail.com
 */
public class TestRandomExcursionsVariantNIST15 extends AbstractNistTest{

    public static final int BITS_NEEDED = 1000000; //TODO Set this value
    public static final String TABLE_NAME = "cumulative_sums_NIST_15";
    
    public TestRandomExcursionsVariantNIST15(AbstractChaoticSystem chaoticSystem) throws Exception {
        super(chaoticSystem, BITS_NEEDED);
        this.type = AnalyserType.NIST_15;
    }
    
    @Override
    public void executeTest(boolean[] bits) {
        /* 
         * The variable bits is the input bits of the lenght of BITS_NEEDED generated by the chaotic system.
         * This method should change pValue attribute of the result.
         * this.pValue = result;
         * It is recommended that each sequence to be tested consist of a minimum of 1,000,000 bits (i.e., n â‰¥ 106).
         */
        int n = bits.length;
        
        int[] stateX = {-9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] sk = new int[n + 2];
        int j = 0;
        
        sk[0] = 0;
        sk[n + 1] = 0;
        
        for (int i = 1; i < bits.length + 1; i++) {
            sk[i] = bits[i] ? 1 : -1;
            if (sk[i] == 0) j++;
        }
        if (sk[n-1] != 0) j++;
        
        int constraint = (0.005*Math.pow((double)n, 0.5)) > 500 ? (int)(0.005*Math.pow((double)n, 0.5)) : 500;
        if (j < constraint) {
            // Insufficient number of cycles to run the tests
            // TODO : Throw an error
            return;
        }
        
        double[] pValues = new double[18];
        
        for (int p = 0; p <= 17; p++) {
            int x = stateX[p];
            int count = 0;
            for (int i = 0; i < n; i++) {
                if ( sk[i] == x ) count++;   
            }

            pValues[p] = erfc(Math.abs(count - j) / (Math.sqrt(2.0 * j * (4.0 * Math.abs(x) - 2))));
        }
        
        // TODO : Log independant P values instead of a mean
        for (double d : pValues) {
            this.pValue += d;
        }
        
        this.pValue /= pValues.length;
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }
    
}
